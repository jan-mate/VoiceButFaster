import deps.Deps
import deps.Versions

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: "../artifacts.gradle"

android {

  compileSdkVersion Versions.compileSdk

  defaultConfig {
    applicationId "de.ph1b.audiobook"
    minSdkVersion Versions.minSdk
    targetSdkVersion Versions.targetSdk

    versionCode Versions.versionCode
    versionName Versions.versionName

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }

  signingConfigs {
    release {
      Properties props = new Properties()
      File propsFile = rootProject.file('signing.properties')
      if (!propsFile.canRead()) {
        println("Use CI keystore.")
        propsFile = rootProject.file('.circleci/signing/signing.properties')
      }
      props.load(new FileInputStream(propsFile))
      storeFile = rootProject.file(props['STORE_FILE'])
      storePassword = props['STORE_PASSWORD']
      keyAlias = props['KEY_ALIAS']
      keyPassword = props['KEY_PASSWORD']
    }
  }

  buildTypes {
    release {
      minifyEnabled true
      shrinkResources true
      multiDexEnabled false
    }
    debug {
      minifyEnabled false
      shrinkResources false
      ext.enableCrashlytics = false
      multiDexEnabled true
    }
    all {
      signingConfig signingConfigs.release
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro'
    }
  }

  testOptions.unitTests.returnDefaultValues = true

  lintOptions {
    checkDependencies true
    ignoreTestSources true
  }

  compileOptions {
    sourceCompatibility Versions.sourceCompatibility
    targetCompatibility Versions.targetCompatibility
  }

  //noinspection GroovyMissingReturnStatement
  packagingOptions {
    exclude 'META-INF/rxjava.properties'
  }

  flavorDimensions "free"
  productFlavors {
    opensource {
      dimension "free"
    }
    proprietary {
      dimension "free"
    }
  }
}

androidExtensions {
  experimental = true
}

dependencies {
  implementation project(":core")
  implementation project(":common")
  implementation project(":data")
  implementation project(":covercolorextractor")

  implementation Deps.chapterReader

  implementation Deps.AndroidX.appCompat
  implementation Deps.AndroidX.recyclerView
  implementation Deps.material
  implementation Deps.AndroidX.transitions
  implementation Deps.AndroidX.constraintLayout
  implementation Deps.AndroidX.mediaCompat
  implementation Deps.AndroidX.fragment

  implementation Deps.picasso

  implementation Deps.materialDialogs
  implementation Deps.materialCab

  implementation Deps.floatingActionButton

  proprietaryImplementation(Deps.crashlytics) {
    transitive = true
  }

  implementation Deps.Dagger.core
  kapt Deps.Dagger.compiler

  implementation Deps.AndroidX.ktx

  testImplementation Deps.junit
  testImplementation Deps.truth
  testImplementation Deps.mockito
  testImplementation Deps.mockitoKotlin

  androidTestImplementation Deps.AndroidX.testRunner
  androidTestImplementation Deps.truth

  implementation Deps.rxJava
  implementation Deps.rxAndroid
  implementation Deps.rxPreferences

  implementation Deps.Kotlin.std
  implementation Deps.Kotlin.coroutines
  implementation Deps.Kotlin.coroutinesAndroid

  implementation Deps.timber

  implementation Deps.ExoPlayer.core
  implementation Deps.ExoPlayer.flac
  implementation Deps.ExoPlayer.opus

  implementation Deps.Conductor.base
  implementation Deps.Conductor.support
  implementation Deps.Conductor.lifecycle

  implementation Deps.moshi

  implementation Deps.tapTarget
}

// task that is an alias for f-droid
task fdroid(dependsOn: ':app:assembleOpensourceRelease')
task release(dependsOn: ':app:assembleProprietaryRelease')

kotlin {
  experimental {
    coroutines "enable"
  }
}
